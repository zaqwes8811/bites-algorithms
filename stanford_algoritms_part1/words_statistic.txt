// 1
Introduction
Merge Sort 
(Overview)
Design and Analysis 
of Algorithms IWhy Study Merge Sort?
• Good introduction to divide & conquer
– Improves over Selection, Insertion, Bubble sorts
• Calibrate your preparation
Tim Roughgarden
• Motivates guiding principles for algorithm 
analysis (worst-case and asymptotic analysis)
• Analysis generalizes to “Master Method”The Sorting Problem
Tim RoughgardenMerge Sort: Example
Tim Roughgarden

// 2
Introduction
Merge Sort 
Tim Roughgarden
(Pseudocode)
Design and Analysis 
of Algorithms IMerge Sort: Pseudocode
Tim RoughgardenPseudocode for Merge:
Tim RoughgardenC = output [length = n]
A = 1
st
sorted array [n/2]
B = 2
nd
sorted array [n/2]
i = 1
for k = 1 to n
if A(i) < B(j)
C(k) = A(i)
i++
Pseudocode for Merge:
Tim Roughgarden
i = 1
j = 1
i++
else [B(j) < A(i)]
C(k) = B(j)
j++
end
(ignores end cases)Merge Sort Running Time?
Tim RoughgardenC = output [length = n]
A = 1
st
sorted array [n/2]
B = 2
nd
sorted array [n/2]
i = 1
for k = 1 to n
if A(i) < B(j)
C(k) = A(i)
i++
Pseudocode for Merge:
Tim Roughgarden
i = 1
j = 1
i++
else [B(j) < A(i)]
C(k) = B(j)
j++
end
(ignores end cases)Running Time of Merge
Tim RoughgardenRunning Time of Merge Sort
Tim Roughgarden

upshot

// 3
Introduction
Merge Sort 
Tim Roughgarden
(Analysis)
Design and Analysis 
of Algorithms IRunning Time of Merge Sort
Tim RoughgardenProof of claim (assuming n = power of 2):
Tim RoughgardenRoughly how many levels does this recursion tree have (as a 
function of n, the length of the input array)?
A constant number (independent of n).Proof of claim (assuming n = power of 2):
Tim Roughgarden2
j
and 2
j
, respectively.Tim RoughgardenRunning Time of Merge Sort
Tim Roughgarden